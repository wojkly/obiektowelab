Jest kilka rozwiązań tego problemu

1. Można utworzyc tablice n x n (n to rozmiar planszy) i
po kazdym ruchu jakiegos zwierzecia aktualizowac odpowiednie
pola, po uprzednim sprawdzeniu, czy pole na ktore sie chcemy
udac jest wolne, zlozonosc O(n^2) pamieciowa i obliczeniowa

2.Mozna utworzyc tablice zwierząt o rozmiarze a, w miare pojawiania
sie nowych zwierzat przedluzac ją. Gdy chcemy sprawdzic czy dane pole
jest wolne, przeszukujemy cala tablice i aktualizujemy nowe
wspolrzedne zwierzecia, zlozonosc O(a), ale gdy bedzie duzo zwierzat
to zmierza do O(n^2)

Implementacja: Utworzyłbym klasę AnimalsList, której atrybutem byłaby
lista zwierząt. Metodami tej klasy byłoby dodanie zwierzęcia,
usunięcie oraz przeszukanie i sprawdzenie, czy żadne z nich nie
zajmuje miejsca, na ktore chcemy przejśc danym zwierzeciem

3.Można utworzyć słownik i w nim trzymać pozycje zwierząt, wtedy
sprawdzenie czy dane pole jest wolne bedzie o zlozonosci obliczeniowej
O(1)
Gdy bedzie wykonywany ruch, to usuwamy informacje o poprzednim polu
i wpisujemy nowe pole do słownika